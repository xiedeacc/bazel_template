load("@bazel_template//bazel:common.bzl", "template_rule")

package(default_visibility = ["//visibility:public"])

COPTS = [
    "-Iexternal/libdwarf/src/lib/libdwarf",
    "-isystem external/libiberty/include",
    "-isystem external/folly",
    "-isystem $(GENDIR)/external/folly",
    "-isystem external/zstd/lib",
    "-isystem external/double-conversion",
    "-isystem external/lz4/lib",
    "-isystem external/bzip2",
    "-isystem external/com_github_google_snappy",
    "-isystem external/libsodium/src/libsodium/include",
    "-Iexternal/libsodium/src/libsodium/include/sodium",
    "-isystem $(GENDIR)/external/libsodium/src/libsodium/include",
    "-isystem $(GENDIR)/external/libunwind/include",
    "-Iexternal/libunwind/src",
    "-Iexternal/libunwind/include",
    "-I$(GENDIR)/external/libunwind/include/tdep",
    "-Iexternal/libunwind/include/tdep",
    "-Iexternal/libunwind/src/mi",
    "-Wall",
    "-Wno-deprecated",
    "-Wno-deprecated-declarations",
    "-Wno-sign-compare",
    "-Wno-unused",
    "-Wunused-label",
    "-Wunused-result",
    "-Wuninitialized",
    "-Wshadow-compatible-local",
    "-Wno-noexcept-type",
    "-g",
    "-std=gnu++17",
    "-fcoroutines",
    "-finput-charset=UTF-8",
    "-fsigned-char",
    "-faligned-new",
    "-fopenmp",
]

LOCAL_DEFINES = [
    "GFLAGS_IS_A_DLL=0",
    "HAVE_CONFIG_H",
    "_GNU_SOURCE",
    "_REENTRANT",
    "_LARGEFILE64_SOURCE",
    "BOOST_ATOMIC_DYN_LINK",
    "BOOST_ATOMIC_NO_LIB",
    "BOOST_CONTEXT_DYN_LINK",
    "BOOST_CONTEXT_NO_LIB",
    "BOOST_FILESYSTEM_DYN_LINK",
    "BOOST_FILESYSTEM_NO_LIB",
    "BOOST_PROGRAM_OPTIONS_DYN_LINK",
    "BOOST_PROGRAM_OPTIONS_NO_LIB",
    "BOOST_REGEX_DYN_LINK",
    "BOOST_REGEX_NO_LIB",
    "BOOST_SYSTEM_DYN_LINK",
    "BOOST_SYSTEM_NO_LIB",
    "BOOST_THREAD_DYN_LINK",
    "BOOST_THREAD_NO_LIB",
] + select({
    #"@bazel_template//bazel:jemalloc": ["USE_JEMALLOC"],
    "@bazel_template//bazel:jemalloc": [],
    "@bazel_template//bazel:tcmalloc": [],
    "//conditions:default": [],
})

cc_library(
    name = "MathOperation_AVX2",
    srcs = [
        "folly/crypto/detail/MathOperation_AVX2.cpp",
    ],
    copts = COPTS + ["-mavx"],
    local_defines = LOCAL_DEFINES,
    deps = [":common"],
)

cc_library(
    name = "MathOperation",
    srcs = [
        "folly/crypto/detail/MathOperation_SSE2.cpp",
        "folly/crypto/detail/MathOperation_Simple.cpp",
    ],
    copts = COPTS + ["-mno-avx"],
    local_defines = LOCAL_DEFINES,
    deps = [":common"],
)

cc_library(
    name = "checksum",
    srcs = [
        "folly/external/fast-crc32/sse_crc32c_v8s3x3.cpp",
        "folly/hash/detail/ChecksumDetail.cpp",
        "folly/hash/detail/Crc32CombineDetail.cpp",
        "folly/hash/detail/Crc32cDetail.cpp",
    ],
    copts = COPTS + ["-mpclmul"],
    local_defines = LOCAL_DEFINES,
    deps = [":common"],
)

cc_library(
    name = "checksum-avx512",
    srcs = [
        "folly/external/fast-crc32/avx512_crc32c_v8s3x4.cpp",
    ],
    copts = COPTS + [
        "-mpclmul",
        #"-mavx512f",
        #"-mavx512vl",
    ],
    local_defines = LOCAL_DEFINES,
    deps = [":common"],
)

cc_library(
    name = "base64",
    srcs = [
        "folly/detail/base64_detail/Base64_SSE4_2.cpp",
    ],
    copts = COPTS + ["-msse4.2"],
    local_defines = LOCAL_DEFINES,
    deps = [":common"],
)

cc_library(
    name = "assemble",
    srcs = select({
        "@bazel_template//bazel:linux_x86_64": [
            "folly/memcpy.S",
            #"folly/memset.S",
        ],
        "@bazel_template//bazel:linux_aarch64": [
            "folly/external/aor/memcpy-advsimd.S",
            "folly/external/aor/memcpy-armv8.S",
            "folly/external/aor/memcpy_sve.S",
            "folly/external/aor/memset-advsimd.S",
        ],
    }),
    copts = COPTS + ["-x assembler-with-cpp"],
    local_defines = LOCAL_DEFINES + select({
        "@bazel_template//bazel:linux_x86_64": [
        ],
        "@bazel_template//bazel:linux_aarch64": [
            "FOLLY_MEMCPY_IS_MEMCPY",
            "FOLLY_MEMSET_IS_MEMSET",
        ],
    }),
    deps = [":common"],
)

cc_library(
    name = "common",
    #srcs = glob(
    #[
    #"folly/**/*.cpp",
    #],
    #exclude = [
    #"folly/experimental/symbolizer/tool/Addr2Line.cpp",
    #"folly/io/tool/HugePageUtil.cpp",
    #"folly/json/tool/JSONSchemaTester.cpp",
    #"folly/tool/BenchmarkCompare.cpp",
    #"folly/build/**",
    #"folly/docs/**",
    #"folly/external/aor/**",
    #"folly/crypto/detail/MathOperation_AVX2.cpp",
    #"folly/crypto/detail/MathOperation_SSE2.cpp",
    #"folly/crypto/detail/MathOperation_Simple.cpp",
    #"folly/detail/base64_detail/Base64_SSE4_2.cpp",
    #"folly/external/fast-crc32/sse_crc32c_v8s3x3.cpp",
    #"folly/external/fast-crc32/avx512_crc32c_v8s3x4.cpp",
    #"folly/hash/detail/ChecksumDetail.cpp",
    #"folly/hash/detail/Crc32CombineDetail.cpp",
    #"folly/hash/detail/Crc32cDetail.cpp",
    #"folly/python/**/*.cpp",
    #"folly/**/example/**",
    #"folly/**/test/**/*.cpp",
    #],
    #),
    srcs = [
        "folly/CancellationToken.cpp",
        "folly/ClockGettimeWrappers.cpp",
        "folly/Conv.cpp",
        "folly/Demangle.cpp",
        "folly/ExceptionString.cpp",
        "folly/ExceptionWrapper.cpp",
        "folly/Executor.cpp",
        "folly/File.cpp",
        "folly/FileUtil.cpp",
        "folly/Fingerprint.cpp",
        "folly/FollyMemcpy.cpp",
        "folly/FollyMemset.cpp",
        "folly/Format.cpp",
        "folly/GroupVarint.cpp",
        "folly/IPAddress.cpp",
        "folly/IPAddressV4.cpp",
        "folly/IPAddressV6.cpp",
        "folly/MacAddress.cpp",
        "folly/MicroLock.cpp",
        "folly/Random.cpp",
        "folly/ScopeGuard.cpp",
        "folly/SharedMutex.cpp",
        "folly/Singleton.cpp",
        "folly/SingletonThreadLocal.cpp",
        "folly/SocketAddress.cpp",
        "folly/String.cpp",
        "folly/Subprocess.cpp",
        "folly/TimeoutQueue.cpp",
        "folly/Try.cpp",
        "folly/Unicode.cpp",
        "folly/Uri.cpp",
        "folly/channels/MaxConcurrentRateLimiter.cpp",
        "folly/cli/NestedCommandLineApp.cpp",
        "folly/cli/ProgramOptions.cpp",
        "folly/compression/Compression.cpp",
        "folly/compression/CompressionContextPoolSingletons.cpp",
        "folly/compression/QuotientMultiSet.cpp",
        "folly/compression/Select64.cpp",
        "folly/compression/Zlib.cpp",
        "folly/compression/Zstd.cpp",
        "folly/concurrency/CacheLocality.cpp",
        "folly/concurrency/DeadlockDetector.cpp",
        "folly/concurrency/ProcessLocalUniqueId.cpp",
        "folly/concurrency/memory/AtomicReadMostlyMainPtr.cpp",
        "folly/container/detail/F14Table.cpp",
        "folly/coro/Baton.cpp",
        "folly/coro/Mutex.cpp",
        "folly/coro/SharedMutex.cpp",
        "folly/coro/detail/Malloc.cpp",
        "folly/crypto/Blake2xb.cpp",
        "folly/crypto/LtHash.cpp",
        "folly/debugging/exception_tracer/ExceptionCounterLib.cpp",
        "folly/debugging/exception_tracer/ExceptionStackTraceLib.cpp",
        "folly/debugging/exception_tracer/ExceptionTracer.cpp",
        "folly/debugging/exception_tracer/ExceptionTracerLib.cpp",
        "folly/debugging/exception_tracer/SmartExceptionStackTraceHooks.cpp",
        "folly/debugging/exception_tracer/SmartExceptionTracer.cpp",
        "folly/debugging/exception_tracer/SmartExceptionTracerSingleton.cpp",
        "folly/debugging/exception_tracer/StackTrace.cpp",
        "folly/detail/AsyncTrace.cpp",
        "folly/detail/FileUtilDetail.cpp",
        "folly/detail/Futex.cpp",
        "folly/detail/IPAddress.cpp",
        "folly/detail/MemoryIdler.cpp",
        "folly/detail/PerfScoped.cpp",
        "folly/detail/RangeCommon.cpp",
        "folly/detail/RangeSse42.cpp",
        "folly/detail/SimpleSimdStringUtils.cpp",
        "folly/detail/SocketFastOpen.cpp",
        "folly/detail/SplitStringSimd.cpp",
        "folly/detail/Sse.cpp",
        "folly/detail/StaticSingletonManager.cpp",
        "folly/detail/ThreadLocalDetail.cpp",
        "folly/detail/TrapOnAvx512.cpp",
        "folly/detail/UniqueInstance.cpp",
        "folly/detail/base64_detail/Base64Api.cpp",
        "folly/detail/base64_detail/Base64SWAR.cpp",
        "folly/detail/thread_local_globals.cpp",
        "folly/executors/CPUThreadPoolExecutor.cpp",
        "folly/executors/Codel.cpp",
        "folly/executors/EDFThreadPoolExecutor.cpp",
        "folly/executors/ExecutionObserver.cpp",
        "folly/executors/ExecutorWithPriority.cpp",
        "folly/executors/FunctionScheduler.cpp",
        "folly/executors/GlobalExecutor.cpp",
        "folly/executors/GlobalThreadPoolList.cpp",
        "folly/executors/IOThreadPoolDeadlockDetectorObserver.cpp",
        "folly/executors/IOThreadPoolExecutor.cpp",
        "folly/executors/InlineExecutor.cpp",
        "folly/executors/ManualExecutor.cpp",
        "folly/executors/QueueObserver.cpp",
        "folly/executors/QueuedImmediateExecutor.cpp",
        "folly/executors/SoftRealTimeExecutor.cpp",
        "folly/executors/StrandExecutor.cpp",
        "folly/executors/ThreadPoolExecutor.cpp",
        "folly/executors/ThreadedExecutor.cpp",
        "folly/executors/ThreadedRepeatingFunctionRunner.cpp",
        "folly/executors/TimedDrivableExecutor.cpp",
        "folly/executors/TimekeeperScheduledExecutor.cpp",
        "folly/executors/thread_factory/PriorityThreadFactory.cpp",
        "folly/experimental/io/AsyncBase.cpp",
        "folly/experimental/io/AsyncIO.cpp",
        "folly/experimental/io/AsyncIoUringSocket.cpp",
        "folly/experimental/io/EpollBackend.cpp",
        "folly/experimental/io/EventBasePoller.cpp",
        "folly/experimental/io/IoUring.cpp",
        "folly/experimental/io/IoUringBackend.cpp",
        "folly/experimental/io/IoUringEvent.cpp",
        "folly/experimental/io/IoUringEventBaseLocal.cpp",
        "folly/experimental/io/IoUringProvidedBufferRing.cpp",
        "folly/experimental/io/MuxIOThreadPoolExecutor.cpp",
        "folly/experimental/io/SimpleAsyncIO.cpp",
        "folly/experimental/symbolizer/Dwarf.cpp",
        "folly/experimental/symbolizer/DwarfImpl.cpp",
        "folly/experimental/symbolizer/DwarfLineNumberVM.cpp",
        "folly/experimental/symbolizer/DwarfSection.cpp",
        "folly/experimental/symbolizer/DwarfUtil.cpp",
        "folly/experimental/symbolizer/Elf.cpp",
        "folly/experimental/symbolizer/ElfCache.cpp",
        "folly/experimental/symbolizer/LineReader.cpp",
        "folly/experimental/symbolizer/SignalHandler.cpp",
        "folly/experimental/symbolizer/StackTrace.cpp",
        "folly/experimental/symbolizer/SymbolizePrinter.cpp",
        "folly/experimental/symbolizer/SymbolizedFrame.cpp",
        "folly/experimental/symbolizer/Symbolizer.cpp",
        "folly/ext/test_ext.cpp",
        "folly/external/farmhash/farmhash.cpp",
        "folly/fibers/BatchSemaphore.cpp",
        "folly/fibers/Baton.cpp",
        "folly/fibers/Fiber.cpp",
        "folly/fibers/FiberManager.cpp",
        "folly/fibers/GuardPageAllocator.cpp",
        "folly/fibers/Semaphore.cpp",
        "folly/fibers/SemaphoreBase.cpp",
        "folly/fibers/SimpleLoopController.cpp",
        "folly/fibers/async/Async.cpp",
        "folly/fibers/detail/AtomicBatchDispatcher.cpp",
        "folly/futures/Barrier.cpp",
        "folly/futures/Future.cpp",
        "folly/futures/HeapTimekeeper.cpp",
        "folly/futures/ManualTimekeeper.cpp",
        "folly/futures/Promise.cpp",
        "folly/futures/SharedPromise.cpp",
        "folly/futures/ThreadWheelTimekeeper.cpp",
        "folly/futures/detail/Core.cpp",
        "folly/hash/Checksum.cpp",
        "folly/hash/SpookyHashV1.cpp",
        "folly/hash/SpookyHashV2.cpp",
        "folly/init/Init.cpp",
        "folly/init/Phase.cpp",
        "folly/io/Cursor.cpp",
        "folly/io/FsUtil.cpp",
        "folly/io/GlobalShutdownSocketSet.cpp",
        "folly/io/HugePages.cpp",
        "folly/io/IOBuf.cpp",
        "folly/io/IOBufIovecBuilder.cpp",
        "folly/io/IOBufQueue.cpp",
        "folly/io/RecordIO.cpp",
        "folly/io/ShutdownSocketSet.cpp",
        "folly/io/SocketOptionMap.cpp",
        "folly/io/SocketOptionValue.cpp",
        "folly/io/async/AsyncPipe.cpp",
        "folly/io/async/AsyncSSLSocket.cpp",
        "folly/io/async/AsyncServerSocket.cpp",
        "folly/io/async/AsyncSignalHandler.cpp",
        "folly/io/async/AsyncSocket.cpp",
        "folly/io/async/AsyncSocketException.cpp",
        "folly/io/async/AsyncSocketTransport.cpp",
        "folly/io/async/AsyncTimeout.cpp",
        "folly/io/async/AsyncUDPSocket.cpp",
        "folly/io/async/DelayedDestruction.cpp",
        "folly/io/async/EventBase.cpp",
        "folly/io/async/EventBaseBackendBase.cpp",
        "folly/io/async/EventBaseLocal.cpp",
        "folly/io/async/EventBaseManager.cpp",
        "folly/io/async/EventBaseThread.cpp",
        "folly/io/async/EventHandler.cpp",
        "folly/io/async/HHWheelTimer.cpp",
        "folly/io/async/PasswordInFile.cpp",
        "folly/io/async/Request.cpp",
        "folly/io/async/SSLContext.cpp",
        "folly/io/async/SSLOptions.cpp",
        "folly/io/async/STTimerFDTimeoutManager.cpp",
        "folly/io/async/ScopedEventBaseThread.cpp",
        "folly/io/async/TerminateCancellationToken.cpp",
        "folly/io/async/TimeoutManager.cpp",
        "folly/io/async/TimerFD.cpp",
        "folly/io/async/TimerFDTimeoutManager.cpp",
        "folly/io/async/VirtualEventBase.cpp",
        "folly/io/async/fdsock/AsyncFdSocket.cpp",
        "folly/io/async/fdsock/SocketFds.cpp",
        "folly/io/async/ssl/OpenSSLUtils.cpp",
        "folly/io/async/ssl/SSLErrors.cpp",
        "folly/io/async/test/ScopedBoundPort.cpp",
        "folly/io/async/test/SocketPair.cpp",
        "folly/io/async/test/TimeUtil.cpp",
        "folly/io/coro/ServerSocket.cpp",
        "folly/io/coro/Transport.cpp",
        "folly/json/DynamicParser.cpp",
        "folly/json/JSONSchema.cpp",
        "folly/json/JsonTestUtil.cpp",
        "folly/json/bser/Dump.cpp",
        "folly/json/bser/Load.cpp",
        "folly/json/dynamic.cpp",
        "folly/json/json.cpp",
        "folly/json/json_patch.cpp",
        "folly/json/json_pointer.cpp",
        "folly/lang/CString.cpp",
        "folly/lang/Exception.cpp",
        "folly/lang/SafeAssert.cpp",
        "folly/lang/ToAscii.cpp",
        "folly/lang/UncaughtExceptions.cpp",
        "folly/logging/AsyncFileWriter.cpp",
        "folly/logging/AsyncLogWriter.cpp",
        "folly/logging/BridgeFromGoogleLogging.cpp",
        "folly/logging/CustomLogFormatter.cpp",
        "folly/logging/FileHandlerFactory.cpp",
        "folly/logging/FileWriterFactory.cpp",
        "folly/logging/GlogStyleFormatter.cpp",
        "folly/logging/ImmediateFileWriter.cpp",
        "folly/logging/Init.cpp",
        "folly/logging/InitWeak.cpp",
        "folly/logging/LogCategory.cpp",
        "folly/logging/LogCategoryConfig.cpp",
        "folly/logging/LogConfig.cpp",
        "folly/logging/LogConfigParser.cpp",
        "folly/logging/LogHandlerConfig.cpp",
        "folly/logging/LogLevel.cpp",
        "folly/logging/LogMessage.cpp",
        "folly/logging/LogName.cpp",
        "folly/logging/LogStream.cpp",
        "folly/logging/LogStreamProcessor.cpp",
        "folly/logging/Logger.cpp",
        "folly/logging/LoggerDB.cpp",
        "folly/logging/ObjectToString.cpp",
        "folly/logging/RateLimiter.cpp",
        "folly/logging/StandardLogHandler.cpp",
        "folly/logging/StandardLogHandlerFactory.cpp",
        "folly/logging/StreamHandlerFactory.cpp",
        "folly/logging/xlog.cpp",
        "folly/memcpy_select_aarch64.cpp",
        "folly/memory/JemallocHugePageAllocator.cpp",
        "folly/memory/JemallocNodumpAllocator.cpp",
        "folly/memory/MallctlHelper.cpp",
        "folly/memory/ReentrantAllocator.cpp",
        "folly/memory/SanitizeAddress.cpp",
        "folly/memory/SanitizeLeak.cpp",
        "folly/memory/ThreadCachedArena.cpp",
        "folly/memory/detail/MallocImpl.cpp",
        "folly/net/NetOps.cpp",
        "folly/net/NetOpsDispatcher.cpp",
        "folly/net/TcpInfo.cpp",
        "folly/net/TcpInfoDispatcher.cpp",
        "folly/net/detail/SocketFileDescriptorMap.cpp",
        "folly/observer/detail/Core.cpp",
        "folly/observer/detail/ObserverManager.cpp",
        "folly/portability/Builtins.cpp",
        "folly/portability/Dirent.cpp",
        "folly/portability/Fcntl.cpp",
        "folly/portability/Filesystem.cpp",
        "folly/portability/Libgen.cpp",
        "folly/portability/Malloc.cpp",
        "folly/portability/OpenSSL.cpp",
        "folly/portability/PThread.cpp",
        "folly/portability/Sched.cpp",
        "folly/portability/Sockets.cpp",
        "folly/portability/Stdio.cpp",
        "folly/portability/Stdlib.cpp",
        "folly/portability/String.cpp",
        "folly/portability/SysFile.cpp",
        "folly/portability/SysMembarrier.cpp",
        "folly/portability/SysMman.cpp",
        "folly/portability/SysResource.cpp",
        "folly/portability/SysStat.cpp",
        "folly/portability/SysTime.cpp",
        "folly/portability/SysUio.cpp",
        "folly/portability/Time.cpp",
        "folly/portability/Unistd.cpp",
        "folly/settings/Immutables.cpp",
        "folly/settings/Settings.cpp",
        "folly/settings/Types.cpp",
        "folly/ssl/OpenSSLCertUtils.cpp",
        "folly/ssl/OpenSSLHash.cpp",
        "folly/ssl/OpenSSLKeyUtils.cpp",
        "folly/ssl/PasswordCollector.cpp",
        "folly/ssl/SSLSessionManager.cpp",
        "folly/ssl/detail/OpenSSLSession.cpp",
        "folly/stats/QuantileEstimator.cpp",
        "folly/stats/TDigest.cpp",
        "folly/stats/detail/DoubleRadixSort.cpp",
        "folly/synchronization/AsymmetricThreadFence.cpp",
        "folly/synchronization/AtomicNotification.cpp",
        "folly/synchronization/DistributedMutex.cpp",
        "folly/synchronization/Hazptr.cpp",
        "folly/synchronization/HazptrDomain.cpp",
        "folly/synchronization/HazptrThreadPoolExecutor.cpp",
        "folly/synchronization/ParkingLot.cpp",
        "folly/synchronization/Rcu.cpp",
        "folly/synchronization/SanitizeThread.cpp",
        "folly/synchronization/WaitOptions.cpp",
        "folly/synchronization/detail/Hardware.cpp",
        "folly/synchronization/detail/Sleeper.cpp",
        "folly/system/AtFork.cpp",
        "folly/system/EnvUtil.cpp",
        "folly/system/HardwareConcurrency.cpp",
        "folly/system/MemoryMapping.cpp",
        "folly/system/Pid.cpp",
        "folly/system/Shell.cpp",
        "folly/system/ThreadId.cpp",
        "folly/system/ThreadName.cpp",
        "folly/test/DeterministicSchedule.cpp",
        "folly/testing/TestUtil.cpp",
        "folly/tracing/AsyncStack.cpp",
    ],
    hdrs = [
        "folly/io/async/test/ScopedBoundPort.h",
        "folly/io/async/test/SocketPair.h",
        "folly/io/async/test/TimeUtil.h",
        "folly/synchronization/test/Semaphore.h",
        "folly/test/DeterministicSchedule.h",
        ":folly-config_h",
    ] + glob(
        [
            "folly/**/*.h",
        ],
        exclude = [
            "folly/external/aor/**",
            "folly/test/**/*.h",
            "folly/**/test/**/*.h",
            "folly/python/**/*.h",
        ],
    ) + select({
        "@bazel_template//bazel:linux_x86_64": [
        ],
        "@bazel_template//bazel:linux_aarch64": [
            "folly/external/aor/asmdefs.h",
        ],
    }),
    copts = COPTS,
    linkstatic = 0,
    local_defines = LOCAL_DEFINES,
    deps = [
        "@boost//:algorithm",
        "@boost//:bind",
        "@boost//:context",
        "@boost//:conversion",
        "@boost//:core",
        "@boost//:crc",
        "@boost//:filesystem",
        "@boost//:mpl",
        "@boost//:multi_index",
        "@boost//:preprocessor",
        "@boost//:program_options",
        "@boost//:utility",
        "@com_github_gflags_gflags//:gflags",
        "@com_github_glog_glog//:glog",
        "@com_github_google_snappy//:snappy",
        "@com_google_googletest//:gtest",
        "@double-conversion//:double-conversion",
        "@fmt",
        "@libaio//:aio",
        "@libdwarf//:dwarf",
        "@libevent//:event",
        "@libevent//:event_openssl",
        "@libevent//:event_pthreads",
        "@libiberty//:iberty",
        "@libsodium//:sodium",
        "@libunwind//:unwind",
        "@liburing//:liburing-ffi",
        "@openssl//:ssl",
        "@zstd",
    ] + select({
        "@bazel_template//bazel:jemalloc": ["@jemalloc"],
        #"@bazel_template//bazel:tcmalloc": ["@tcmalloc//tcmalloc"],
        "//conditions:default": [],
    }),
    alwayslink = True,
)

cc_library(
    name = "folly",
    deps = [
        ":MathOperation",
        ":MathOperation_AVX2",
        ":assemble",
        ":base64",
        ":checksum",
        ":checksum-avx512",
        ":common",
    ],
)

genrule(
    name = "folly-config_h_in",
    outs = ["folly/folly-config.h.in"],
    cmd = "\n".join([
        "cat <<'EOF' >$@",
        "#pragma once",
        "",
        "#ifdef __APPLE__",
        "#include <TargetConditionals.h> // @manual",
        "#endif",
        "",
        "#if !defined(FOLLY_MOBILE)",
        "#if defined(__ANDROID__) || \\",
        "    (defined(__APPLE__) &&  \\",
        "     (TARGET_IPHONE_SIMULATOR || TARGET_OS_SIMULATOR || TARGET_OS_IPHONE))",
        "#define FOLLY_MOBILE 1",
        "#else",
        "#define FOLLY_MOBILE 0",
        "#endif",
        "#endif // FOLLY_MOBILE",
        "",
        "#define FOLLY_HAVE_PTHREAD 1",
        "#define FOLLY_HAVE_PTHREAD_ATFORK 1",
        "#define FOLLY_HAVE_LIBGFLAGS 1",
        "#define FOLLY_GFLAGS_NAMESPACE gflags",
        "#define FOLLY_HAVE_LIBGLOG 1",
        "#define FOLLY_USE_JEMALLOC 1",
        "#if __has_include(<features.h>)",
        "#include <features.h>",
        "#endif",
        "#define FOLLY_HAVE_ACCEPT4 1",
        "#define FOLLY_HAVE_GETRANDOM 1",
        "#define FOLLY_HAVE_PREADV 1",
        "#define FOLLY_HAVE_PWRITEV 1",
        "#define FOLLY_HAVE_CLOCK_GETTIME 1",
        "#define FOLLY_HAVE_PIPE2 1",
        "#define FOLLY_HAVE_IFUNC 1",
        "#define FOLLY_HAVE_UNALIGNED_ACCESS 1",
        "#define FOLLY_HAVE_VLA 1",
        "#define FOLLY_HAVE_WEAK_SYMBOLS 1",
        "#define FOLLY_HAVE_LINUX_VDSO 1",
        "#define FOLLY_HAVE_MALLOC_USABLE_SIZE 1",
        "/* #undef FOLLY_HAVE_INT128_T */",
        "#define FOLLY_HAVE_WCHAR_SUPPORT 1",
        "#define FOLLY_HAVE_EXTRANDOM_SFMT19937 1",
        "#define HAVE_VSNPRINTF_ERRORS 1",
        "#define FOLLY_HAVE_LIBUNWIND 1",
        "#define FOLLY_HAVE_DWARF 1",
        "#define FOLLY_HAVE_ELF 1",
        "#define FOLLY_HAVE_SWAPCONTEXT 1",
        "#define FOLLY_HAVE_BACKTRACE 1",
        "#define FOLLY_USE_SYMBOLIZER 1",
        "#define FOLLY_DEMANGLE_MAX_SYMBOL_SIZE 1024",
        "#define FOLLY_HAVE_SHADOW_LOCAL_WARNINGS 1",
        "#define FOLLY_HAVE_LIBLZ4 1",
        "#define FOLLY_HAVE_LIBLZMA 1",
        "#define FOLLY_HAVE_LIBSNAPPY 1",
        "#define FOLLY_HAVE_LIBZ 1",
        "#define FOLLY_HAVE_LIBZSTD 1",
        "#define FOLLY_HAVE_LIBBZ2 1",
        "#define FOLLY_LIBRARY_SANITIZE_ADDRESS 0",
        "/* #undef FOLLY_SUPPORT_SHARED_LIBRARY */",
        "#define FOLLY_HAVE_LIBRT 0",
        "EOF",
    ]),
)

template_rule(
    name = "folly-config_h",
    src = ":folly-config_h_in",
    out = "folly/folly-config.h",
    substitutions = select({
                        "@bazel_template//bazel:linux_x86_64": {
                        },
                        "@bazel_template//bazel:linux_aarch64": {
                            "#define FOLLY_HAVE_EXTRANDOM_SFMT19937 1": "#define FOLLY_HAVE_EXTRANDOM_SFMT19937 0",
                        },
                    }) |
                    select({
                        "@bazel_template//bazel:jemalloc": {"#define FOLLY_USE_JEMALLOC 1": "#define FOLLY_USE_JEMALLOC 1"},
                        "@bazel_template//bazel:tcmalloc": {"#define FOLLY_USE_JEMALLOC 1": ""},
                        "//conditions:default": {"#define FOLLY_USE_JEMALLOC 1": ""},
                    }),
)
