diff --git a/folly/FileUtil.cpp b/folly/FileUtil.cpp
index ccafc9fc5..fd8335a50 100644
--- a/folly/FileUtil.cpp
+++ b/folly/FileUtil.cpp
@@ -95,7 +95,7 @@ int dup2NoInt(int oldFd, int newFd) {
 int fdatasyncNoInt(int fd) {
 #if defined(__APPLE__)
   return int(wrapNoInt(fcntl, fd, F_FULLFSYNC));
-#elif defined(__FreeBSD__) || defined(_MSC_VER)
+#elif defined(__FreeBSD__) || defined(_MSC_VER) || defined(__MINGW32__)
   return int(wrapNoInt(fsync, fd));
 #else
   return int(wrapNoInt(fdatasync, fd));
diff --git a/folly/Random.cpp b/folly/Random.cpp
index 882b4189f..257d4328c 100644
--- a/folly/Random.cpp
+++ b/folly/Random.cpp
@@ -31,7 +31,8 @@
 
 #include <glog/logging.h>
 
-#ifdef _MSC_VER
+#if defined( _MSC_VER) || defined(__MINGW32__)
+#include <windows.h>
 #include <wincrypt.h> // @manual
 #else
 #include <fcntl.h>
@@ -46,7 +47,7 @@ namespace folly {
 namespace {
 
 void readRandomDevice(void* data, size_t size) {
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
   static auto const cryptoProv = [] {
     HCRYPTPROV prov;
     if (!CryptAcquireContext(
diff --git a/folly/concurrency/CacheLocality.cpp b/folly/concurrency/CacheLocality.cpp
index 58180cc2e..d4ae507b3 100644
--- a/folly/concurrency/CacheLocality.cpp
+++ b/folly/concurrency/CacheLocality.cpp
@@ -16,12 +16,13 @@
 
 #include <folly/concurrency/CacheLocality.h>
 
-#ifndef _MSC_VER
+#if !defined(_MSC_VER) && !defined(__MINGW32__)
 #define _GNU_SOURCE 1 // for RTLD_NOLOAD
 #include <dlfcn.h>
 #endif
 #include <fstream>
 #include <mutex>
+#include <thread>
 
 #include <fmt/core.h>
 
@@ -50,8 +51,11 @@ static CacheLocality getSystemLocalityInfo() {
       // keep trying
     }
   }
-
+#if !defined(__MINGW32__)
   long numCpus = sysconf(_SC_NPROCESSORS_CONF);
+#else
+  long numCpus = std::thread::hardware_concurrency();
+#endif
   if (numCpus <= 0) {
     // This shouldn't happen, but if it does we should try to keep
     // going.  We are probably not going to be able to parse /sys on
diff --git a/folly/detail/IPAddressSource.h b/folly/detail/IPAddressSource.h
index c8dbcc802..cc2d4f234 100644
--- a/folly/detail/IPAddressSource.h
+++ b/folly/detail/IPAddressSource.h
@@ -243,7 +243,7 @@ inline void fastIpv4AppendToString(const in_addr& inAddr, std::string& out) {
 }
 
 inline size_t fastIpv6ToBufferUnsafe(const in6_addr& in6Addr, char* str) {
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
   const uint16_t* bytes = reinterpret_cast<const uint16_t*>(&in6Addr.u.Word);
 #else
   const uint16_t* bytes = reinterpret_cast<const uint16_t*>(&in6Addr.s6_addr16);
diff --git a/folly/experimental/symbolizer/Elf.cpp b/folly/experimental/symbolizer/Elf.cpp
index 6a7f74fa4..87b092311 100644
--- a/folly/experimental/symbolizer/Elf.cpp
+++ b/folly/experimental/symbolizer/Elf.cpp
@@ -47,6 +47,8 @@
 #endif
 #elif defined(__ANDROID__)
 #define FOLLY_ELF_NATIVE_CLASS __WORDSIZE
+#elif defined(__aarch64__)
+#define FOLLY_ELF_NATIVE_CLASS 64
 #endif // __ELF_NATIVE_CLASS
 
 namespace folly {
diff --git a/folly/experimental/symbolizer/detail/Debug.h b/folly/experimental/symbolizer/detail/Debug.h
index 8ba2bc343..4b70628a6 100644
--- a/folly/experimental/symbolizer/detail/Debug.h
+++ b/folly/experimental/symbolizer/detail/Debug.h
@@ -26,7 +26,8 @@ namespace folly {
 namespace symbolizer {
 namespace detail {
 
-#if defined(__linux__) && FOLLY_HAVE_ELF && FOLLY_HAVE_DWARF
+#if defined(__linux__) && defined(__GLIBC__) && FOLLY_HAVE_ELF && \
+    FOLLY_HAVE_DWARF
 inline struct r_debug* get_r_debug() {
   return &_r_debug;
 }
diff --git a/folly/external/farmhash/farmhash.cpp b/folly/external/farmhash/farmhash.cpp
index e72144e96..37e6d0d77 100644
--- a/folly/external/farmhash/farmhash.cpp
+++ b/folly/external/farmhash/farmhash.cpp
@@ -126,7 +126,7 @@
 
 #if defined(FARMHASH_UNKNOWN_ENDIAN) || !defined(bswap_64)
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
 
 #undef bswap_32
 #undef bswap_64
diff --git a/folly/lang/Exception.cpp b/folly/lang/Exception.cpp
index 2ce0e1f64..b2701f0b9 100644
--- a/folly/lang/Exception.cpp
+++ b/folly/lang/Exception.cpp
@@ -258,7 +258,7 @@ namespace abi = __cxxabiv1;
 
 #endif // defined(__FreeBSD__)
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 
 #if defined(__clang__)
 struct _s_ThrowInfo; // compiler intrinsic in msvc
@@ -492,7 +492,7 @@ void* exception_ptr_get_object_(
 
 #endif // defined(__FreeBSD__)
 
-#if defined(_WIN32)
+#if defined(_WIN32) && !defined(__MINGW32__)
 
 template <typename T>
 static T* win32_decode_pointer(T* ptr) {
diff --git a/folly/memcpy_select_aarch64.cpp b/folly/memcpy_select_aarch64.cpp
index d5884e5a8..3b42515d9 100644
--- a/folly/memcpy_select_aarch64.cpp
+++ b/folly/memcpy_select_aarch64.cpp
@@ -52,7 +52,7 @@
 #include <cstddef>
 #include <cstdint>
 
-#if defined(__linux__) && defined(__aarch64__)
+#if defined(__linux__) && defined(__aarch64__) && defined(__GLIBC__)
 
 #include <asm/hwcap.h> // @manual
 
diff --git a/folly/net/NetOps.cpp b/folly/net/NetOps.cpp
index ea2b61c19..fb97f1bb0 100644
--- a/folly/net/NetOps.cpp
+++ b/folly/net/NetOps.cpp
@@ -29,9 +29,13 @@
 #include <folly/ScopeGuard.h>
 #include <folly/net/detail/SocketFileDescriptorMap.h>
 
-#ifdef _WIN32
+#if defined(_WIN32)
+#if defined(__MINGW32__)
+#include <mswsock.h> // @manual
+#else
 #include <MSWSock.h> // @manual
 #endif
+#endif
 
 #if (defined(__linux__) && !defined(__ANDROID__)) ||                       \
     (defined(__ANDROID__) && __ANDROID_API__ >= 21 /* released 2014 */) || \
diff --git a/folly/net/NetOps.h b/folly/net/NetOps.h
index 71c1883df..33e6c1171 100644
--- a/folly/net/NetOps.h
+++ b/folly/net/NetOps.h
@@ -26,8 +26,15 @@
 #include <folly/portability/Windows.h>
 
 #ifdef _WIN32
+#include <memory>
 
+#if !defined(__MINGW32__)
 #include <WS2tcpip.h> // @manual
+#else
+#include <mswsock.h>
+#include <winsock2.h> // @manual
+#include <ws2tcpip.h> // @manual
+#endif
 
 using nfds_t = int;
 using sa_family_t = ADDRESS_FAMILY;
diff --git a/folly/net/detail/SocketFileDescriptorMap.cpp b/folly/net/detail/SocketFileDescriptorMap.cpp
index fae205c2b..c9ca07843 100644
--- a/folly/net/detail/SocketFileDescriptorMap.cpp
+++ b/folly/net/detail/SocketFileDescriptorMap.cpp
@@ -18,6 +18,7 @@
 
 #ifdef _WIN32
 
+#include <mutex>
 #include <shared_mutex>
 #include <unordered_map>
 
@@ -65,11 +66,14 @@ static int closeOnlyFileDescriptor(int fd) {
     return -1;
   }
   int c = 0;
+#if !defined(__MINGW32__)
   __try {
+#endif
     // We expect this to fail. It still closes the file descriptor though.
     c = ::_close(fd);
     // We just have to catch the SEH exception that gets thrown when we do
     // this with a debugger attached -_-....
+#if !defined(__MINGW32__)
   } __except (
       GetExceptionCode() == STATUS_HANDLE_NOT_CLOSABLE
           ? EXCEPTION_CONTINUE_EXECUTION
@@ -77,6 +81,7 @@ static int closeOnlyFileDescriptor(int fd) {
     // We told it to continue execution, so nothing here would
     // be run anyways.
   }
+#endif
   // We're at the core, we don't get the luxery of SCOPE_EXIT because
   // of circular dependencies.
   if (!SetHandleInformation(h, protectFlag, handleFlags)) {
diff --git a/folly/net/detail/SocketFileDescriptorMap.h b/folly/net/detail/SocketFileDescriptorMap.h
index 97604f950..2da59b7d8 100644
--- a/folly/net/detail/SocketFileDescriptorMap.h
+++ b/folly/net/detail/SocketFileDescriptorMap.h
@@ -18,7 +18,7 @@
 
 #include <folly/portability/Windows.h>
 
-#ifndef _WIN32
+#if !defined(_WIN32) || defined(__MINGW32__)
 // This can't go via the portability header, because
 // the portability header depends on us.
 #include <unistd.h>
diff --git a/folly/portability/Fcntl.cpp b/folly/portability/Fcntl.cpp
index 15b726136..eeb205bab 100644
--- a/folly/portability/Fcntl.cpp
+++ b/folly/portability/Fcntl.cpp
@@ -24,9 +24,11 @@
 namespace folly {
 namespace portability {
 namespace fcntl {
+#if !defined(__MINGW32__)
 int creat(char const* fn, int pm) {
   return _creat(fn, pm);
 }
+#endif
 
 int fcntl(int fd, int cmd, ...) {
   va_list args;
@@ -85,6 +87,13 @@ int fcntl(int fd, int cmd, ...) {
   return res;
 }
 
+int posix_fallocate(int fd, off_t offset, off_t len) {
+  // We'll pretend we always have enough space. We
+  // can't exactly pre-allocate on windows anyways.
+  return 0;
+}
+
+#if !defined(__MINGW32__)
 int open(char const* fn, int of, int pm) {
   int fh;
   int realMode = _S_IREAD;
@@ -109,11 +118,7 @@ int open(char const* fn, int of, int pm) {
   return res ? -1 : fh;
 }
 
-int posix_fallocate(int fd, off_t offset, off_t len) {
-  // We'll pretend we always have enough space. We
-  // can't exactly pre-allocate on windows anyways.
-  return 0;
-}
+#endif
 } // namespace fcntl
 } // namespace portability
 } // namespace folly
diff --git a/folly/portability/Fcntl.h b/folly/portability/Fcntl.h
index 8b5759f7b..4ec913779 100644
--- a/folly/portability/Fcntl.h
+++ b/folly/portability/Fcntl.h
@@ -46,10 +46,14 @@
 namespace folly {
 namespace portability {
 namespace fcntl {
+#if !defined(__MINGW32__)
 int creat(char const* fn, int pm);
+#endif
 int fcntl(int fd, int cmd, ...);
 int posix_fallocate(int fd, off_t offset, off_t len);
+#if !defined(__MINGW32__)
 int open(char const* fn, int of, int pm = 0);
+#endif
 } // namespace fcntl
 } // namespace portability
 } // namespace folly
diff --git a/folly/portability/Sockets.cpp b/folly/portability/Sockets.cpp
index 5a5961a10..e4856a7ac 100644
--- a/folly/portability/Sockets.cpp
+++ b/folly/portability/Sockets.cpp
@@ -16,12 +16,18 @@
 
 #include <folly/portability/Sockets.h>
 
-#ifdef _MSC_VER
+#if defined(_MSC_VER) || defined(__MINGW32__)
 
 #include <errno.h>
 #include <fcntl.h>
 
+#if !defined(__MINGW32__)
 #include <MSWSock.h> // @manual
+#else
+#include <mswsock.h> // @manual
+#include <winsock2.h> // @manual
+#include <ws2tcpip.h> // @manual
+#endif
 
 #include <folly/ScopeGuard.h>
 #include <folly/net/NetworkSocket.h>
diff --git a/folly/portability/Stdio.cpp b/folly/portability/Stdio.cpp
index b836f6d8d..25efe3538 100644
--- a/folly/portability/Stdio.cpp
+++ b/folly/portability/Stdio.cpp
@@ -24,6 +24,7 @@
 #include <folly/portability/Unistd.h>
 
 extern "C" {
+#if !defined(__MINGW32__)
 int dprintf(int fd, const char* fmt, ...) {
   va_list args;
   va_start(args, fmt);
@@ -55,11 +56,13 @@ int pclose(FILE* f) {
 FILE* popen(const char* name, const char* mode) {
   return _popen(name, mode);
 }
+#endif
 
 void setbuffer(FILE* f, char* buf, size_t size) {
   setvbuf(f, buf, _IOFBF, size);
 }
 
+#if !defined(__MINGW32__)
 int vasprintf(char** dest, const char* format, va_list ap) {
   int len = vsnprintf(nullptr, 0, format, ap);
   if (len <= 0) {
@@ -72,6 +75,7 @@ int vasprintf(char** dest, const char* format, va_list ap) {
   free(buf);
   return -1;
 }
+#endif
 }
 
 #endif
diff --git a/folly/portability/Stdio.h b/folly/portability/Stdio.h
index 7de41a617..63003ff6f 100644
--- a/folly/portability/Stdio.h
+++ b/folly/portability/Stdio.h
@@ -23,10 +23,14 @@
 #include <cstdint>
 
 extern "C" {
+#if !defined(__MINGW32__)
 int dprintf(int fd, const char* fmt, ...);
 int pclose(FILE* f);
 FILE* popen(const char* name, const char* mode);
+#endif
 void setbuffer(FILE* f, char* buf, size_t size);
+#if !defined(__MINGW32__)
 int vasprintf(char** dest, const char* format, va_list ap);
+#endif
 }
 #endif
diff --git a/folly/portability/Stdlib.cpp b/folly/portability/Stdlib.cpp
index e77a895ef..77f18ff35 100644
--- a/folly/portability/Stdlib.cpp
+++ b/folly/portability/Stdlib.cpp
@@ -27,6 +27,7 @@
 #include <folly/portability/Windows.h>
 
 extern "C" {
+#if !defined(__MINGW32__)
 char* mktemp(char* tn) {
   return _mktemp(tn);
 }
@@ -131,6 +132,7 @@ int setenv(const char* name, const char* value, int overwrite) {
   }
   return 0;
 }
+#endif
 
 int unsetenv(const char* name) {
   if (_putenv_s(name, "") != 0) {
@@ -139,7 +141,6 @@ int unsetenv(const char* name) {
   return 0;
 }
 }
-
 #endif
 
 #if !__linux__ && !FOLLY_MOBILE && !defined(__wasm32__)
diff --git a/folly/portability/Stdlib.h b/folly/portability/Stdlib.h
index c9d8f97e3..2d32caa28 100644
--- a/folly/portability/Stdlib.h
+++ b/folly/portability/Stdlib.h
@@ -34,10 +34,15 @@ extern "C" {
 // so, instead of creating two headers for a single define each, we put
 // them here, where they are likely to already have been included in the
 // code that needs them.
+
+#if !defined(__MINGW32__)
 #define PATH_MAX _MAX_PATH
 #define MAXPATHLEN _MAX_PATH
 #define NAME_MAX _MAX_FNAME
 #define HOST_NAME_MAX 255
+#else
+#include <limits.h>
+#endif
 
 char* mktemp(char* tn);
 char* mkdtemp(char* tn);
diff --git a/folly/portability/String.cpp b/folly/portability/String.cpp
index 51585c554..2165673d8 100644
--- a/folly/portability/String.cpp
+++ b/folly/portability/String.cpp
@@ -38,6 +38,7 @@ void bzero(void* s, size_t n) {
   memset(s, 0, n);
 }
 
+#if !defined(__MINGW32__)
 int strcasecmp(const char* a, const char* b) {
   return _stricmp(a, b);
 }
@@ -49,5 +50,6 @@ int strncasecmp(const char* a, const char* b, size_t c) {
 char* strtok_r(char* str, char const* delim, char** ctx) {
   return strtok_s(str, delim, ctx);
 }
+#endif
 }
 #endif
diff --git a/folly/portability/String.h b/folly/portability/String.h
index 8d2685c8f..1e7020e3e 100644
--- a/folly/portability/String.h
+++ b/folly/portability/String.h
@@ -21,7 +21,7 @@
 
 #include <folly/portability/Config.h>
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__MINGW32__)
 #include <strings.h>
 #endif
 
@@ -32,8 +32,10 @@ extern "C" char* strndup(const char* a, size_t len);
 #ifdef _WIN32
 extern "C" {
 void bzero(void* s, size_t n);
+#if !defined(__MINGW32__)
 int strcasecmp(const char* a, const char* b);
 int strncasecmp(const char* a, const char* b, size_t c);
 char* strtok_r(char* str, char const* delim, char** ctx);
+#endif
 }
 #endif
diff --git a/folly/portability/SysStat.cpp b/folly/portability/SysStat.cpp
index 21441f056..1492c8c5b 100644
--- a/folly/portability/SysStat.cpp
+++ b/folly/portability/SysStat.cpp
@@ -20,9 +20,11 @@
 #include <folly/portability/Windows.h>
 
 extern "C" {
+#if !defined(__MINGW32__)
 int chmod(char const* fn, int am) {
   return _chmod(fn, am);
 }
+#endif
 
 int fchmod(int fd, mode_t mode) {
   HANDLE h = (HANDLE)_get_osfhandle(fd);
@@ -51,6 +53,7 @@ int fchmod(int fd, mode_t mode) {
 }
 
 // Just return the result of a normal stat for now
+#if !defined(__MINGW32__)
 int lstat(const char* path, struct stat* st) {
   return stat(path, st);
 }
@@ -62,5 +65,7 @@ int mkdir(const char* fn, int /* mode */) {
 int umask(int md) {
   return _umask(md);
 }
+#endif
 }
+
 #endif
diff --git a/folly/portability/SysStat.h b/folly/portability/SysStat.h
index 882368651..7dbefe909 100644
--- a/folly/portability/SysStat.h
+++ b/folly/portability/SysStat.h
@@ -43,10 +43,14 @@
 #define MAXSYMLINKS 255
 
 extern "C" {
+#if !defined(__MINGW32__)
 int chmod(char const* fn, int am);
+#endif
 int fchmod(int fd, mode_t mode);
+#if !defined(__MINGW32__)
 int lstat(const char* path, struct stat* st);
 int mkdir(const char* fn, int mode);
 int umask(int md);
+#endif
 }
 #endif
diff --git a/folly/portability/SysTime.cpp b/folly/portability/SysTime.cpp
index bbdfcb37b..3eecb9e91 100644
--- a/folly/portability/SysTime.cpp
+++ b/folly/portability/SysTime.cpp
@@ -16,7 +16,7 @@
 
 #include <folly/portability/SysTime.h>
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
 
 #include <cstdint>
 
diff --git a/folly/portability/SysTime.h b/folly/portability/SysTime.h
index 539985aa9..cdd0ce6bf 100644
--- a/folly/portability/SysTime.h
+++ b/folly/portability/SysTime.h
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#ifndef _WIN32
+#if !defined(_WIN32) || defined(__MINGW32__)
 
 #include <sys/time.h>
 
diff --git a/folly/portability/SysTypes.h b/folly/portability/SysTypes.h
index c631e1d02..ef0542882 100644
--- a/folly/portability/SysTypes.h
+++ b/folly/portability/SysTypes.h
@@ -24,10 +24,12 @@
 // This is a massive pain to have be an `int` due to the pthread implementation
 // we support, but it's far more compatible with the rest of the windows world
 // as an `int` than it would be as a `void*`
+#if !defined(__MINGW32__)
 using pid_t = int;
 
 using uid_t = int;
 using gid_t = int;
+#endif
 
 // This isn't actually supposed to be defined here, but it's the most
 // appropriate place without defining a portability header for stdint.h
@@ -38,7 +40,10 @@ using ssize_t = SSIZE_T;
 #define HAVE_MODE_T 1
 // The Windows headers don't define this anywhere, nor do any of the libs
 // that Folly depends on, so define it here.
+#if !defined(__MINGW32__)
 using mode_t = unsigned int;
 #endif
 
 #endif
+
+#endif
diff --git a/folly/portability/Time.cpp b/folly/portability/Time.cpp
index 4039ea814..d7e75339a 100644
--- a/folly/portability/Time.cpp
+++ b/folly/portability/Time.cpp
@@ -288,7 +288,11 @@ extern "C" int clock_gettime(clockid_t clock_id, struct timespec* tp) {
 extern "C" {
 char* asctime_r(const tm* tm, char* buf) {
   char tmpBuf[64];
+#if defined(__MINGW32__)
+  if (asctime_s(tmpBuf, sizeof(tmpBuf), tm)) {
+#else
   if (asctime_s(tmpBuf, tm)) {
+#endif
     return nullptr;
   }
   // Nothing we can do if the buff is to small :(
diff --git a/folly/portability/Unistd.cpp b/folly/portability/Unistd.cpp
index 74f8f27b1..83e385932 100644
--- a/folly/portability/Unistd.cpp
+++ b/folly/portability/Unistd.cpp
@@ -198,6 +198,8 @@ ProcessHandleWrapper getParentProcessHandle() {
 }
 } // namespace
 
+#if !defined(__MINGW32__)
+
 int access(char const* fn, int am) {
   return _access(fn, am);
 }
@@ -221,6 +223,7 @@ int dup2(int fhs, int fhd) {
   return _dup2(fhs, fhd);
 }
 
+#endif
 int fsync(int fd) {
   HANDLE h = (HANDLE)_get_osfhandle(fd);
   if (h == INVALID_HANDLE_VALUE) {
@@ -232,6 +235,7 @@ int fsync(int fd) {
   return 0;
 }
 
+#if !defined(__MINGW32__)
 int ftruncate(int fd, off_t len) {
   off_t origLoc = _lseek(fd, 0, SEEK_CUR);
   if (origLoc == -1) {
@@ -257,11 +261,13 @@ int ftruncate(int fd, off_t len) {
 char* getcwd(char* buf, int sz) {
   return _getcwd(buf, sz);
 }
+#endif
 
 int getdtablesize() {
   return _getmaxstdio();
 }
 
+#if !defined(__MINGW32__)
 gid_t getgid() {
   return 1;
 }
@@ -277,15 +283,17 @@ pid_t getppid() {
 uid_t getuid() {
   return 1;
 }
-
-int isatty(int fh) {
-  return _isatty(fh);
-}
+#endif
 
 int lockf(int fd, int cmd, off_t len) {
   return _locking(fd, cmd, len);
 }
 
+#if !defined(__MINGW32__)
+int isatty(int fh) {
+  return _isatty(fh);
+}
+
 off_t lseek(int fh, off_t off, int orig) {
   return _lseek(fh, off, orig);
 }
@@ -297,6 +305,7 @@ off64_t lseek64(int fh, off64_t off, int orig) {
 int rmdir(const char* path) {
   return _rmdir(path);
 }
+#endif
 
 int pipe(int pth[2]) {
   // We need to be able to listen to pipes with
@@ -319,6 +328,7 @@ ssize_t pwrite(int fd, const void* buf, size_t count, off_t offset) {
   return wrapPositional<is64Bit>(_write, fd, offset, buf, (unsigned int)count);
 }
 
+#if !defined(__MINGW32__)
 ssize_t read(int fh, void* buf, size_t count) {
   if (folly::portability::sockets::is_fh_socket(fh)) {
     SOCKET s = (SOCKET)_get_osfhandle(fh);
@@ -339,6 +349,7 @@ ssize_t read(int fh, void* buf, size_t count) {
   }
   return r;
 }
+#endif
 
 ssize_t readlink(const char* path, char* buf, size_t buflen) {
   if (!buflen) {
@@ -373,10 +384,12 @@ void* sbrk(intptr_t /* i */) {
   return (void*)-1;
 }
 
+#if !defined(__MINGW32__)
 unsigned int sleep(unsigned int seconds) {
   Sleep((DWORD)(seconds * 1000));
   return 0;
 }
+#endif
 
 long sysconf(int tp) {
   switch (tp) {
diff --git a/folly/portability/Unistd.h b/folly/portability/Unistd.h
index 2262210a1..fed91f76b 100644
--- a/folly/portability/Unistd.h
+++ b/folly/portability/Unistd.h
@@ -31,6 +31,10 @@ ssize_t pread64(int fd, void* buf, size_t count, off64_t offset);

 #else

+#if defined(__MINGW32__)
+#include <unistd.h>
+#endif
+
 #include <cstdint>

 #include <process.h> // @manual
@@ -44,7 +48,6 @@ ssize_t pread64(int fd, void* buf, size_t count, off64_t offset);
 // such as close(), where we need to override the definition of an existing
 // function. To avoid conflicts at link time, everything here is in a namespace
 // which is then used globally.
-
 #define _SC_PAGESIZE 1
 #define _SC_PAGE_SIZE _SC_PAGESIZE
 #define _SC_NPROCESSORS_ONLN 2
@@ -71,35 +74,47 @@ namespace folly {
 namespace portability {
 namespace unistd {
 using off64_t = int64_t;
+#if !defined(__MINGW32__)
 int access(char const* fn, int am);
 int chdir(const char* path);
 int close(int fh);
 int dup(int fh);
 int dup2(int fhs, int fhd);
+#endif
 int fsync(int fd);
+#if !defined(__MINGW32__)
 int ftruncate(int fd, off_t len);
 char* getcwd(char* buf, int sz);
+#endif
 int getdtablesize();
+#if !defined(__MINGW32__)
 int getgid();
 pid_t getppid();
 int getuid();
-int isatty(int fh);
+#endif
 int lockf(int fd, int cmd, off_t len);
+#if !defined(__MINGW32__)
+int isatty(int fh);
 off_t lseek(int fh, off_t off, int orig);
 off64_t lseek64(int fh, off64_t off, int orig);
 ssize_t read(int fh, void* buf, size_t mcc);
 int rmdir(const char* path);
+#endif
 int pipe(int pth[2]);
 ssize_t pread(int fd, void* buf, size_t count, off_t offset);
 ssize_t pread64(int fd, void* buf, size_t count, off64_t offset);
 ssize_t pwrite(int fd, const void* buf, size_t count, off_t offset);
 ssize_t readlink(const char* path, char* buf, size_t buflen);
 void* sbrk(intptr_t i);
+#if !defined(__MINGW32__)
 unsigned int sleep(unsigned int seconds);
+#endif
 long sysconf(int tp);
+#if !defined(__MINGW32__)
 int truncate(const char* path, off_t len);
 int usleep(unsigned int ms);
 ssize_t write(int fh, void const* buf, size_t count);
+#endif
 } // namespace unistd
 } // namespace portability
 } // namespace folly
@@ -108,4 +123,5 @@ FOLLY_PUSH_WARNING
 FOLLY_CLANG_DISABLE_WARNING("-Wheader-hygiene")
 /* using override */ using namespace folly::portability::unistd;
 FOLLY_POP_WARNING
+
 #endif
diff --git a/folly/portability/Windows.h b/folly/portability/Windows.h
index 1e4e80167..9d5be594f 100644
--- a/folly/portability/Windows.h
+++ b/folly/portability/Windows.h
@@ -63,8 +63,16 @@
 #define NOMINMAX 1
 #endif
 
+#if defined(__MINGW32__)
+// clang-format off
+#include <mswsock.h> // @manual
+#include <winsock2.h> // @manual
+#include <windows.h> // @manual
+// clang-format on
+#else
 #include <WinSock2.h> // @manual
 #include <Windows.h> // @manual
+#endif
 
 #ifdef CAL_GREGORIAN
 #undef CAL_GREGORIAN
diff --git a/folly/system/ThreadName.cpp b/folly/system/ThreadName.cpp
index 52c4ddd64..f0513b23d 100644
--- a/folly/system/ThreadName.cpp
+++ b/folly/system/ThreadName.cpp
@@ -237,21 +237,27 @@ bool setThreadNameWindowsViaDebugger(DWORD id, StringPiece name) noexcept {
 
   // SEH requires no use of C++ object destruction semantics in this stack
   // frame.
+#if !defined(__MINGW32__)
   __try {
+#endif
     RaiseException(kMSVCException, 0, 4, tniUnion.upArray);
+#if !defined(__MINGW32__)
   } __except (
       GetExceptionCode() == kMSVCException ? EXCEPTION_CONTINUE_EXECUTION
                                            : EXCEPTION_EXECUTE_HANDLER) {
     // Swallow the exception when a debugger isn't attached.
   }
+#endif
   return true;
 }
 
 bool setThreadNameWindows(std::thread::id tid, StringPiece name) {
+#if !defined(__MINGW32__)
   static_assert(
       sizeof(DWORD) == sizeof(std::thread::id),
       "This assumes std::thread::id is a thin wrapper around "
       "the Win32 thread id, but that doesn't appear to be true.");
+#endif
 
   // std::thread::id is a thin wrapper around the Windows thread ID,
   // so just extract it.
@@ -271,6 +277,31 @@ bool setThreadNameWindows(std::thread::id tid, StringPiece name) {
 #endif
 } // namespace
 
+
+#if defined(__MINGW32__)
+#include <tlhelp32.h>
+unsigned int GetThreadsByProcessID(pthread_t pid) {
+    HANDLE hThreadSnap = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
+    if (hThreadSnap == INVALID_HANDLE_VALUE) {
+        return -1;
+    }
+
+    THREADENTRY32 te32;
+    te32.dwSize = sizeof(THREADENTRY32);
+    unsigned int ret = 0;
+    if (Thread32First(hThreadSnap, &te32)) {
+        do {
+            if (te32.th32OwnerProcessID == pid) {
+                ret = (unsigned long)te32.th32ThreadID;
+            }
+        } while (Thread32Next(hThreadSnap, &te32));
+    }
+
+    CloseHandle(hThreadSnap);
+    return ret;
+}
+#endif
+
 bool setThreadName(std::thread::id tid, StringPiece name) {
 #ifdef _WIN32
   return setThreadNameWindows(tid, name);
@@ -281,14 +312,20 @@ bool setThreadName(std::thread::id tid, StringPiece name) {
 
 bool setThreadName(pthread_t pid, StringPiece name) {
 #ifdef _WIN32
+#if !defined(__MINGW32__)
   static_assert(
       sizeof(unsigned int) == sizeof(std::thread::id),
       "This assumes std::thread::id is a thin wrapper around "
       "the thread id as an unsigned int, but that doesn't appear to be true.");
+#endif
 
   // std::thread::id is a thin wrapper around an integral thread id,
   // so just stick the ID in.
+#if !defined(__MINGW32__)
   unsigned int tid = pthread_getw32threadid_np(pid);
+#else
+  unsigned int tid = GetThreadsByProcessID(pid);
+#endif
   std::thread::id id;
   std::memcpy(&id, &tid, sizeof(id));
   return setThreadName(id, name);
diff --git a/folly/testing/TestUtil.cpp b/folly/testing/TestUtil.cpp
index ab2d2fec6..afe1b5713 100644
--- a/folly/testing/TestUtil.cpp
+++ b/folly/testing/TestUtil.cpp
@@ -148,11 +148,15 @@ SavedState disableInvalidParameters() {
 #ifdef _WIN32
   SavedState ret;
   ret.previousThreadLocalHandler =
-      _set_thread_local_invalid_parameter_handler([](const wchar_t*,
+#if !defined(__MINGW32__)
+    _set_thread_local_invalid_parameter_handler([](const wchar_t*,
                                                      const wchar_t*,
                                                      const wchar_t*,
                                                      unsigned int,
                                                      uintptr_t) {});
+#else
+    nullptr;
+#endif
   ret.previousCrtReportMode = _CrtSetReportMode(_CRT_ASSERT, 0);
   return ret;
 #else
@@ -162,8 +166,13 @@ SavedState disableInvalidParameters() {
 
 #ifdef _WIN32
 void enableInvalidParameters(SavedState state) {
+#if !defined(__MINGW32__)
   _set_thread_local_invalid_parameter_handler(
       (_invalid_parameter_handler)state.previousThreadLocalHandler);
+#else
+  _set_invalid_parameter_handler(
+      (_invalid_parameter_handler)state.previousThreadLocalHandler);
+#endif
   _CrtSetReportMode(_CRT_ASSERT, state.previousCrtReportMode);
 }
 #else
diff --git a/folly/testing/TestUtil.h b/folly/testing/TestUtil.h
index 65f768e02..b8a477eff 100644
--- a/folly/testing/TestUtil.h
+++ b/folly/testing/TestUtil.h
@@ -138,7 +138,11 @@ class ChangeToTempDir {
 
 namespace detail {
 struct SavedState {
+#if !defined(__MINGW32__)
   void* previousThreadLocalHandler;
+#else
+  void* previousThreadLocalHandler;
+#endif
   int previousCrtReportMode;
 };
 SavedState disableInvalidParameters();
diff --git a/folly/tracing/StaticTracepoint.h b/folly/tracing/StaticTracepoint.h
index 02e099bb3..7520e5b89 100644
--- a/folly/tracing/StaticTracepoint.h
+++ b/folly/tracing/StaticTracepoint.h
@@ -42,40 +42,13 @@
 
 #define FOLLY_HAVE_SDT 0
 
-// Mark variadic macro args as unused from https://stackoverflow.com/a/31470425
-#define FOLLY_UNUSED0()
-#define FOLLY_UNUSED1(a) (void)(a)
-#define FOLLY_UNUSED2(a, b) (void)(a), FOLLY_UNUSED1(b)
-#define FOLLY_UNUSED3(a, b, c) (void)(a), FOLLY_UNUSED2(b, c)
-#define FOLLY_UNUSED4(a, b, c, d) (void)(a), FOLLY_UNUSED3(b, c, d)
-#define FOLLY_UNUSED5(a, b, c, d, e) (void)(a), FOLLY_UNUSED4(b, c, d, e)
-#define FOLLY_UNUSED6(a, b, c, d, e, f) (void)(a), FOLLY_UNUSED5(b, c, d, e, f)
-#define FOLLY_UNUSED7(a, b, c, d, e, f, g) \
-  (void)(a), FOLLY_UNUSED6(b, c, d, e, f, g)
-#define FOLLY_UNUSED8(a, b, c, d, e, f, g, h) \
-  (void)(a), FOLLY_UNUSED7(b, c, d, e, f, g, h)
-
-#define FOLLY_VA_NUM_ARGS_IMPL(_0, _1, _2, _3, _4, _5, _6, _7, _8, N, ...) N
-#define FOLLY_VA_NUM_ARGS(...) \
-  FOLLY_VA_NUM_ARGS_IMPL(100, ##__VA_ARGS__, 8, 7, 6, 5, 4, 3, 2, 1, 0)
-
-#define FOLLY_ALL_UNUSED_IMPL_(nargs) FOLLY_UNUSED##nargs
-#define FOLLY_ALL_UNUSED_IMPL(nargs) FOLLY_ALL_UNUSED_IMPL_(nargs)
-
-#if defined(_MSC_VER)
-#define FOLLY_ALL_UNUSED(...)
-#else
-#define FOLLY_ALL_UNUSED(...) \
-  FOLLY_ALL_UNUSED_IMPL(FOLLY_VA_NUM_ARGS(__VA_ARGS__))(__VA_ARGS__)
-#endif
-
-#define FOLLY_SDT(provider, name, ...) \
-  do {                                 \
-    FOLLY_ALL_UNUSED(__VA_ARGS__);     \
+#define FOLLY_SDT(provider, name, ...)  \
+  do {                                  \
+    [](auto const&...) {}(__VA_ARGS__); \
   } while (0)
 #define FOLLY_SDT_WITH_SEMAPHORE(provider, name, ...) \
   do {                                                \
-    FOLLY_ALL_UNUSED(__VA_ARGS__);                    \
+    [](auto const&...) {}(__VA_ARGS__);               \
   } while (0)
 #define FOLLY_SDT_IS_ENABLED(provider, name) (false)
 #define FOLLY_SDT_SEMAPHORE(provider, name) \
