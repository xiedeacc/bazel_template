package(default_visibility = ["//visibility:public"])

config_setting(
    name = "linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "linux_aarch64_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

genrule(
    name = "config_h",
    outs = ["config.h"],
    cmd = "\n".join([
        "cat <<'EOF' >$@",
        "#ifndef GPERFTOOLS_CONFIG_H_",
        "#define GPERFTOOLS_CONFIG_H_",
        "",
        "/* Enable aggressive decommit by default */",
        "/* #undef ENABLE_AGGRESSIVE_DECOMMIT_BY_DEFAULT */",
        "",
        "/* Build runtime detection for sized delete */",
        "/* #undef ENABLE_DYNAMIC_SIZED_DELETE */",
        "",
        "/* Report large allocation */",
        "/* #undef ENABLE_LARGE_ALLOC_REPORT */",
        "",
        "/* Build sized deletion operators */",
        "/* #undef ENABLE_SIZED_DELETE */",
        "",
        "/* Define to 1 if you have the <asm/ptrace.h> header file. */",
        "#define HAVE_ASM_PTRACE_H",
        "",
        "/* Define to 1 if you have the <cygwin/signal.h> header file. */",
        "/* #undef HAVE_CYGWIN_SIGNAL_H */",
        "",
        "/* Define to 1 if you have the declaration of `backtrace', and to 0 if you",
        "   don't. */",
        "#define HAVE_DECL_BACKTRACE 0",
        "",
        "/* Define to 1 if you have the declaration of `cfree', and to 0 if you don't.",
        "   */",
        "#define HAVE_DECL_CFREE 0",
        "",
        "/* Define to 1 if you have the declaration of `memalign', and to 0 if you",
        "   don't. */",
        "#define HAVE_DECL_MEMALIGN 1",
        "",
        "/* Define to 1 if you have the declaration of `nanosleep', and to 0 if you",
        "   don't. */",
        "#define HAVE_DECL_NANOSLEEP 0",
        "",
        "/* Define to 1 if you have the declaration of `posix_memalign', and to 0 if",
        "   you don't. */",
        "#define HAVE_DECL_POSIX_MEMALIGN 1",
        "",
        "/* Define to 1 if you have the declaration of `pvalloc', and to 0 if you",
        "   don't. */",
        "#define HAVE_DECL_PVALLOC 1",
        "",
        "/* Define to 1 if you have the declaration of `sleep', and to 0 if you don't.",
        "   */",
        "#define HAVE_DECL_SLEEP 0",
        "",
        "/* Define to 1 if you have the declaration of `valloc', and to 0 if you don't.",
        "   */",
        "#define HAVE_DECL_VALLOC 1",
        "",
        "/* Define to 1 if you have the <execinfo.h> header file. */",
        "#define HAVE_EXECINFO_H",
        "",
        "/* Define to 1 if you have the <fcntl.h> header file. */",
        "#define HAVE_FCNTL_H",
        "",
        "/* Define to 1 if you have the <features.h> header file. */",
        "#define HAVE_FEATURES_H",
        "",
        "/* Define to 1 if you have the `geteuid' function. */",
        "#define HAVE_GETEUID",
        "",
        "/* Define to 1 if you have the <glob.h> header file. */",
        "#define HAVE_GLOB_H",
        "",
        "/* Define to 1 if you have the <libunwind.h> header file. */",
        "#define HAVE_LIBUNWIND_H 1",
        "",
        "#define USE_LIBUNWIND",
        "",
        "/* Define if this is Linux that has SIGEV_THREAD_ID */",
        "#define HAVE_LINUX_SIGEV_THREAD_ID 1",
        "",
        "/* Define to 1 if you have the <malloc.h> header file. */",
        "#define HAVE_MALLOC_H",
        "",
        "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "/* #undef HAVE_MALLOC_MALLOC_H */",
        "",
        "/* Define to 1 if you have a working `mmap' system call. */",
        "#define HAVE_MMAP",
        "",
        "/* Define to 1 if you have the <poll.h> header file. */",
        "#define HAVE_POLL_H",
        "",
        "/* define if libc has program_invocation_name */",
        "#define HAVE_PROGRAM_INVOCATION_NAME",
        "",
        "/* Define to 1 if you have the `sbrk' function. */",
        "#define HAVE_SBRK",
        "",
        "/* Define to 1 if you have the <sched.h> header file. */",
        "#define HAVE_SCHED_H",
        "",
        "/* Define to 1 if the system has the type `struct mallinfo'. */",
        "#define HAVE_STRUCT_MALLINFO",
        "",
        "/* Define to 1 if the system has the type `struct mallinfo2'. */",
        "#define HAVE_STRUCT_MALLINFO2",
        "",
        "/* Define to 1 if you have the <sys/cdefs.h> header file. */",
        "#define HAVE_SYS_CDEFS_H",
        "",
        "/* Define to 1 if you have the <sys/malloc.h> header file. */",
        "/* #undef HAVE_SYS_MALLOC_H */",
        "",
        "/* Define to 1 if you have the <sys/socket.h> header file. */",
        "#define HAVE_SYS_SOCKET_H",
        "",
        "/* Define to 1 if you have the <sys/syscall.h> header file. */",
        "#define HAVE_SYS_SYSCALL_H 1",
        "",
        "/* Define to 1 if you have the <sys/types.h> header file. */",
        "#define HAVE_SYS_TYPES_H",
        "",
        "/* Define to 1 if you have the <sys/ucontext.h> header file. */",
        "#define HAVE_SYS_UCONTEXT_H 1",
        "",
        "/* Define to 1 if you have the <sys/wait.h> header file. */",
        "#define HAVE_SYS_WAIT_H",
        "",
        "/* Define to 1 if you have the <ucontext.h> header file. */",
        "#define HAVE_UCONTEXT_H 1",
        "",
        "/* Define to 1 if you have the <unistd.h> header file. */",
        "#define HAVE_UNISTD_H",
        "",
        "/* Whether <unwind.h> contains _Unwind_Backtrace */",
        "#define HAVE_UNWIND_BACKTRACE",
        "",
        "/* Define to 1 if you have the <unwind.h> header file. */",
        "#define HAVE_UNWIND_H",
        "",
        "/* define if your compiler has __attribute__ */",
        "#define HAVE___ATTRIBUTE__",
        "",
        "/* define if your compiler supports alignment of functions */",
        "#define HAVE___ATTRIBUTE__ALIGNED_FN",
        "",
        "/* Define to 1 if compiler supports __environ */",
        "#define HAVE___ENVIRON",
        "",
        "/* Always the empty-string on non-windows systems. On windows, should be",
        "   \"__declspec(dllexport)\". This way, when we compile the dll, we export our",
        "   functions/classes. It's safe to define this here because config.h is only",
        "   used internally, to compile the DLL, and every DLL source file #includes",
        "   \"config.h\" before anything else. */",
        "#if defined(WIN32)",
        "#ifndef PERFTOOLS_DLL_DECL",
        "# define PERFTOOLS_IS_A_DLL  1",
        "# define PERFTOOLS_DLL_DECL  __declspec(dllexport)",
        "# define PERFTOOLS_DLL_DECL_FOR_UNITTESTS  __declspec(dllimport)",
        "#endif",
        "#else",
        "#ifndef PERFTOOLS_DLL_DECL",
        "# define PERFTOOLS_DLL_DECL",
        "# define PERFTOOLS_DLL_DECL_FOR_UNITTESTS",
        "#endif",
        "#endif",
        "",
        "/* if libgcc stacktrace method should be default */",
        "/* #undef PREFER_LIBGCC_UNWINDER */",
        "",
        "/* Define 8 bytes of allocation alignment for tcmalloc */",
        "/* #undef TCMALLOC_ALIGN_8BYTES */",
        "",
        "/* Define internal page size for tcmalloc as number of left bitshift */",
        "/* #undef TCMALLOC_PAGE_SIZE_SHIFT */",
        "",
        "/* C99 says: define this to get the PRI... macros from stdint.h */",
        "#ifndef __STDC_FORMAT_MACROS",
        "# define __STDC_FORMAT_MACROS 1",
        "#endif",
        "",
        "#ifdef WIN32",
        "// TODO(csilvers): include windows/port.h in every relevant source file instead?",
        "#include \"windows/port.h\"",
        "#endif  /* WIN32 */",
        "",
        "#endif  /* GPERFTOOLS_CONFIG_H_ */",
        "EOF",
    ]),
)

genrule(
    name = "tcmalloc_h",
    outs = ["gperftools/tcmalloc.h"],
    cmd = "\n".join([
        "cat <<'EOF' >$@",
        "// -*- Mode: C; c-basic-offset: 2; indent-tabs-mode: nil -*-",
        "/* Copyright (c) 2003, Google Inc.",
        " * All rights reserved.",
        " *",
        " * Redistribution and use in source and binary forms, with or without",
        " * modification, are permitted provided that the following conditions are",
        " * met:",
        " *",
        " *     * Redistributions of source code must retain the above copyright",
        " * notice, this list of conditions and the following disclaimer.",
        " *     * Redistributions in binary form must reproduce the above",
        " * copyright notice, this list of conditions and the following disclaimer",
        " * in the documentation and/or other materials provided with the",
        " * distribution.",
        " *     * Neither the name of Google Inc. nor the names of its",
        " * contributors may be used to endorse or promote products derived from",
        " * this software without specific prior written permission.",
        " *",
        " * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
        " * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
        " * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
        " * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT",
        " * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,",
        " * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT",
        " * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,",
        " * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY",
        " * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT",
        " * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE",
        " * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
        " *",
        " * ---",
        " * Author: Sanjay Ghemawat <opensource@google.com>",
        " *         .h file by Craig Silverstein <opensource@google.com>",
        " */",
        "",
        "#ifndef TCMALLOC_TCMALLOC_H_",
        "#define TCMALLOC_TCMALLOC_H_",
        "",
        "#include <stddef.h>                     /* for size_t */",
        "#ifdef __cplusplus",
        "#include <new>                          /* for std::nothrow_t, std::align_val_t */",
        "#endif",
        "",
        "/* Define the version number so folks can check against it */",
        "#define TC_VERSION_MAJOR  2",
        "#define TC_VERSION_MINOR  15",
        "#define TC_VERSION_PATCH  \".\"",
        "#define TC_VERSION_STRING \"gperftools 2.15\"",
        "",
        "/* For struct mallinfo, if it's defined. */",
        "#if 1 || 1",
        "# include <malloc.h>",
        "#endif",
        "",
        "#ifndef PERFTOOLS_NOTHROW",
        "",
        "#ifdef __cplusplus",
        "#define PERFTOOLS_NOTHROW noexcept",
        "#else",
        "# ifdef __GNUC__",
        "#  define PERFTOOLS_NOTHROW __attribute__((__nothrow__))",
        "# else",
        "#  define PERFTOOLS_NOTHROW",
        "# endif",
        "#endif",
        "",
        "#endif",
        "",
        "#ifndef PERFTOOLS_DLL_DECL",
        "# ifdef _WIN32",
        "#   define PERFTOOLS_DLL_DECL  __declspec(dllimport)",
        "# else",
        "#   define PERFTOOLS_DLL_DECL",
        "# endif",
        "#endif",
        "",
        "#ifdef __cplusplus",
        "extern \"C\" {",
        "#endif",
        "  /*",
        "   * Returns a human-readable version string.  If major, minor,",
        "   * and/or patch are not NULL, they are set to the major version,",
        "   * minor version, and patch-code (a string, usually \"\").",
        "   */",
        "  PERFTOOLS_DLL_DECL const char* tc_version(int* major, int* minor,",
        "                                            const char** patch) PERFTOOLS_NOTHROW;",
        "",
        "  PERFTOOLS_DLL_DECL void* tc_malloc(size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_malloc_skip_new_handler(size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_free(void* ptr) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_free_sized(void *ptr, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_realloc(void* ptr, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_calloc(size_t nmemb, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_cfree(void* ptr) PERFTOOLS_NOTHROW;",
        "",
        "  PERFTOOLS_DLL_DECL void* tc_memalign(size_t __alignment,",
        "                                       size_t __size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL int tc_posix_memalign(void** ptr,",
        "                                           size_t align, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_valloc(size_t __size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_pvalloc(size_t __size) PERFTOOLS_NOTHROW;",
        "",
        "  PERFTOOLS_DLL_DECL void tc_malloc_stats(void) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL int tc_mallopt(int cmd, int value) PERFTOOLS_NOTHROW;",
        "#if 1",
        "  PERFTOOLS_DLL_DECL struct mallinfo tc_mallinfo(void) PERFTOOLS_NOTHROW;",
        "#endif",
        "#if 1",
        "  PERFTOOLS_DLL_DECL struct mallinfo2 tc_mallinfo2(void) PERFTOOLS_NOTHROW;",
        "#endif",
        "",
        "  /*",
        "   * This is an alias for MallocExtension::instance()->GetAllocatedSize().",
        "   * It is equivalent to",
        "   *    OS X: malloc_size()",
        "   *    glibc: malloc_usable_size()",
        "   *    Windows: _msize()",
        "   */",
        "  PERFTOOLS_DLL_DECL size_t tc_malloc_size(void* ptr) PERFTOOLS_NOTHROW;",
        "",
        "#ifdef __cplusplus",
        "  PERFTOOLS_DLL_DECL int tc_set_new_mode(int flag) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_new(size_t size);",
        "  PERFTOOLS_DLL_DECL void* tc_new_nothrow(size_t size,",
        "                                          const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete(void* p) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete_sized(void* p, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete_nothrow(void* p,",
        "                                            const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_newarray(size_t size);",
        "  PERFTOOLS_DLL_DECL void* tc_newarray_nothrow(size_t size,",
        "                                               const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray(void* p) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray_sized(void* p, size_t size) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray_nothrow(void* p,",
        "                                                 const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "",
        "#if defined(__cpp_aligned_new) || \\",
        "    (defined(__cplusplus) && __cplusplus >= 201703L) || \\",
        "    (defined(_MSVC_LANG) && _MSVC_LANG >= 201703L)",
        "  PERFTOOLS_DLL_DECL void* tc_new_aligned(size_t size, std::align_val_t al);",
        "  PERFTOOLS_DLL_DECL void* tc_new_aligned_nothrow(size_t size, std::align_val_t al,",
        "                                          const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete_aligned(void* p, std::align_val_t al) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete_sized_aligned(void* p, size_t size, std::align_val_t al) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_delete_aligned_nothrow(void* p, std::align_val_t al,",
        "                                            const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void* tc_newarray_aligned(size_t size, std::align_val_t al);",
        "  PERFTOOLS_DLL_DECL void* tc_newarray_aligned_nothrow(size_t size, std::align_val_t al,",
        "                                               const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray_aligned(void* p, std::align_val_t al) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray_sized_aligned(void* p, size_t size, std::align_val_t al) PERFTOOLS_NOTHROW;",
        "  PERFTOOLS_DLL_DECL void tc_deletearray_aligned_nothrow(void* p, std::align_val_t al,",
        "                                                 const std::nothrow_t&) PERFTOOLS_NOTHROW;",
        "#endif",
        "}",
        "#endif",
        "",
        "/* We're only un-defining for public */",
        "#if !defined(GPERFTOOLS_CONFIG_H_)",
        "",
        "#undef PERFTOOLS_NOTHROW",
        "",
        "#endif /* GPERFTOOLS_CONFIG_H_ */",
        "",
        "#endif  /* #ifndef TCMALLOC_TCMALLOC_H_ */",
        "EOF",
    ]),
)

COPTS = [
    "-Iexternal/gperftools/benchmark",
    "-Iexternal/gperftools/src",
    "-isystem $(GENDIR)/external/gperftools",
    "-isystem $(GENDIR)/external/gperftools/src",
    "-Wall",
    "-Wwrite-strings",
    "-Woverloaded-virtual",
    "-Wno-sign-compare",
    "-fsized-deallocation",
    "-fno-omit-frame-pointer",
    "-momit-leaf-frame-pointer",
]

cc_library(
    name = "tcmalloc",
    srcs = [
        "src/base/dynamic_annotations.cc",
        "src/base/generic_writer.cc",
        "src/base/logging.cc",
        "src/base/proc_maps_iterator.cc",
        "src/base/spinlock.cc",
        "src/base/spinlock_internal.cc",
        "src/base/sysinfo.cc",
        "src/base/elf_mem_image.cc",
        "src/base/vdso_support.cc",
        "src/stacktrace.cc",
    ] + [
        "src/base/low_level_alloc.cc",
        "src/central_freelist.cc",
        "src/common.cc",
        "src/heap-checker.cc",
        "src/heap-profile-table.cc",
        "src/heap-profiler.cc",
        "src/internal_logging.cc",
        "src/malloc_backtrace.cc",
        "src/malloc_extension.cc",
        "src/malloc_hook.cc",
        "src/memfs_malloc.cc",
        "src/memory_region_map.cc",
        "src/mmap_hook.cc",
        "src/page_heap.cc",
        "src/safe_strerror.cc",
        "src/sampler.cc",
        "src/span.cc",
        "src/stack_trace_table.cc",
        "src/static_vars.cc",
        "src/symbolize.cc",
        "src/system-alloc.cc",
        "src/tcmalloc.cc",
        "src/thread_cache.cc",
        "src/thread_cache_ptr.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    hdrs = glob([
        "src/base/**/*.h",
        "src/gperftools/**/*.h",
        "src/*.h",
    ]),
    copts = COPTS,
    local_defines = [
        "tcmalloc_EXPORTS",
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
    deps = [
        "@libunwind//:unwind-all",
    ],
)

cc_library(
    name = "tcmalloc_debug",
    srcs = [
        "src/base/dynamic_annotations.cc",
        "src/base/generic_writer.cc",
        "src/base/logging.cc",
        "src/base/proc_maps_iterator.cc",
        "src/base/spinlock.cc",
        "src/base/spinlock_internal.cc",
        "src/base/sysinfo.cc",
        "src/base/elf_mem_image.cc",
        "src/base/vdso_support.cc",
        "src/stacktrace.cc",
    ] + [
        "src/base/linuxthreads.cc",
        "src/base/low_level_alloc.cc",
        "src/central_freelist.cc",
        "src/common.cc",
        "src/debugallocation.cc",
        "src/heap-checker.cc",
        "src/heap-profile-table.cc",
        "src/heap-profiler.cc",
        "src/internal_logging.cc",
        "src/malloc_backtrace.cc",
        "src/malloc_extension.cc",
        "src/malloc_hook.cc",
        "src/memfs_malloc.cc",
        "src/memory_region_map.cc",
        "src/mmap_hook.cc",
        "src/page_heap.cc",
        "src/safe_strerror.cc",
        "src/sampler.cc",
        "src/span.cc",
        "src/stack_trace_table.cc",
        "src/static_vars.cc",
        "src/symbolize.cc",
        "src/system-alloc.cc",
        "src/thread_cache.cc",
        "src/thread_cache_ptr.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    hdrs = glob([
        "src/base/**/*.h",
        "src/gperftools/**/*.h",
        "src/*.h",
    ]) + [
        "src/tcmalloc.cc",
    ],
    copts = COPTS,
    local_defines = [
        "tcmalloc_EXPORTS",
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
    deps = [
        "@libunwind//:unwind-all",
    ],
)

cc_library(
    name = "profiler",
    srcs = [
        "src/profile-handler.cc",
        "src/profiledata.cc",
        "src/profiler.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    hdrs = glob([
        "src/base/**/*.h",
        "src/gperftools/**/*.h",
        "src/*.h",
    ]),
    copts = COPTS,
    local_defines = [
        "profiler_EXPORTS",
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
    deps = [
        "@libunwind//:unwind-all",
    ],
)

cc_library(
    name = "run_benchmark",
    srcs = [
        "benchmark/run_benchmark.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    hdrs = glob([
        "src/base/**/*.h",
        "benchmark/**/*.h",
        "src/gperftools/**/*.h",
        "src/*.h",
    ]),
    copts = COPTS,
    local_defines = [
        "run_benchmark_EXPORTS",
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
)

cc_binary(
    name = "malloc_bench",
    srcs = [
        "benchmark/malloc_bench.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    copts = COPTS,
    local_defines = [
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
    deps = [
        ":run_benchmark",
        ":tcmalloc",
    ],
)

cc_binary(
    name = "binary_trees",
    srcs = [
        "benchmark/binary_trees.cc",
        ":config_h",
        ":tcmalloc_h",
    ],
    copts = COPTS,
    local_defines = [
        "NDEBUG",
        "FORCED_FRAME_POINTERS",
    ],
    deps = [
        ":tcmalloc",
    ],
)
